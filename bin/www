#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ffltool:server');
var http = require('http');

var nodePath = require('path');
var fs = require('fs');
var https = require('https');

const globals = require('../globals');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create HTTPS server.
 */
var httpsPort = process.env.HTTPSPORT;
var httpsPortInt = undefined;
var isHttpsRequired = false;
if (httpsPort === undefined) {
  globals.log.info('No HTTPS port specified (if prod this is expected, ignore this warning)');
}
else {
  httpsPortInt = parseInt(httpsPort);
  if (Number.isInteger(httpsPortInt) && httpsPortInt > 1024 && httpsPortInt <= 65535) {
    globals.log.info(`starting HTTPS server on port ${httpsPortInt}`);
    isHttpsRequired = true;
  }
  else {
    globals.log.info(`isInteger check: ${Number.isInteger(httpsPortInt)}`);
    globals.log.info(`Invalid value specified for HTTPS server port ${httpsPortInt}`);
  }
} 

if (isHttpsRequired)
{
  let certsBasePath = nodePath.join(process.cwd(), 'security');
  
  let urlConfig = {
      SSL_KEY: nodePath.join(certsBasePath, "cert.key"),
      SSL_CERT: nodePath.join(certsBasePath, "cert.pem"),
  }
  
  const sslOptions = {
      key: fs.readFileSync(urlConfig.SSL_KEY),
      cert: fs.readFileSync(urlConfig.SSL_CERT),
  }
  
  let httpsServer = https.Server(sslOptions, app);
  httpsServer.listen(httpsPortInt, function() {
      globals.log.info(`HTTPS server listening on port ${httpsPortInt}`);
  });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
